dg = CN %>% filter(Area == Region)
dg = dg[,32:37]
samp = nrow(dg)# NA filter
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
dg = dg %>% filter(sick_month >= deaths_month & sick_month >= hosp_month & sick_month >= sick_7d &
sick_month>= sick_today )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
cat('Sample: ', samp, '\n')
cat('Sample + Inconsistency filter: ', nrow(dg), '\n')
cat ('Outliers: ', samp-nrow(dg), '\n')
##########
# City
city = "Shanghai"
dg = CN %>% filter(City == city)
dg = dg[,15:20]
samp = nrow(dg)
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
dg = dg[,15:20]
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
dg = CN %>% filter(City == city)
nrow(dg)
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
dg
dg = dg[,32:37]
dg
print(dg)
print(n=dg)
print(dg,n=32)
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
# df <- as.data.frame(read.table('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-CN.csv', sep=",", header=TRUE))
# df <- as.data.frame(read.table('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Pollfish_Survey_2023-CN-ZH-1000-v3.csv', sep=",", header=TRUE))
# df <- read.table('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Pollfish_Survey_2023-CN-ZH-1000-v3.csv', sep=",", header=TRUE)
df = read_xlsx('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/CH.xlsx')
CN = df
###########
# Region
Region = "Jiangsu"
dg = CN %>% filter(Area == Region)
dg = dg[,32:37]
samp = nrow(dg)# NA filter
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
dg = dg %>% filter(sick_month >= deaths_month & sick_month >= hosp_month & sick_month >= sick_7d &
sick_month>= sick_today )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
cat('Sample: ', samp, '\n')
cat('Sample + Inconsistency filter: ', nrow(dg), '\n')
cat ('Outliers: ', samp-nrow(dg), '\n')
##########
# City
city = "Shanghai"
dg = CN %>% filter(City == city)
dg = dg[,15:20]
samp = nrow(dg)
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
j=1
sum(as.numeric(unlist(dg[,j])))
unlist(dg[,j])
as.numeric(unlist(dg[,j]))
dg = CN %>% filter(City == city)
dg = dg[,32:37]
samp = nrow(dg)
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
dg = dg %>% filter(sick_month >= deaths_month & sick_month >= hosp_month & sick_month >= sick_7d &
sick_month>= sick_today )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
cat('Sample: ', samp, '\n')
cat('Sample + Inconsistency filter: ', nrow(dg), '\n')
cat ('Outliers: ', samp-nrow(dg), '\n')
###############
# UK
df <- as.data.frame(read.table('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-UK.csv', sep=",", header=TRUE))
print(df.n=200)
print(df,n=200)
print(df)
###############
# UK
df <- as.data.frame(read.table('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-UK.csv', sep=",", header=TRUE))
UK = df %>% select(starts_with('Think') |starts_with('From'))
print(UK)
colnames(UK) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
print(UK)
df = read_xlsx('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/CH.xlsx')
CN = df
###########
# Region
Region = "Jiangsu"
Region = "Guangdong"
dg = CN %>% filter(Area == Region)
dg = dg[,32:37]
samp = nrow(dg)# NA filter
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
dg = dg %>% filter(sick_month >= deaths_month & sick_month >= hosp_month & sick_month >= sick_7d &
sick_month>= sick_today )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
cat('Sample: ', samp, '\n')
cat('Sample + Inconsistency filter: ', nrow(dg), '\n')
cat ('Outliers: ', samp-nrow(dg), '\n')
cat('Sample: ', samp, '\n')
cat('Sample + Inconsistency filter: ', nrow(dg), '\n')
cat ('Outliers: ', samp-nrow(dg), '\n')
cat('Sample: ', samp, '\n')
cat('Sample + Inconsistency filter: ', nrow(dg), '\n')
cat ('Outliers: ', samp-nrow(dg), '\n')
s=paste0('Sample: ', samp, '\n')
s=paste0(s,'Sample + Inconsistency filter: ', nrow(dg), '\n')
s=paste0(s,'Outliers: ', samp-nrow(dg), '\n')
cat(s)
##########
# City
city = "Shanghai"
dg = CN %>% filter(City == city)
dg = dg[,32:37]
samp = nrow(dg)
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
dg = dg %>% filter(sick_month >= deaths_month & sick_month >= hosp_month & sick_month >= sick_7d &
sick_month>= sick_today )
for (j in 1:ncol(dg)) {
cat(colnames(dg)[j],sum(as.numeric(unlist(dg[,j])))/(nrow(dg)*15), '\n')
}
s=paste0('Sample: ', samp, '\n')
s=paste0(s,'Sample + Inconsistency filter: ', nrow(dg), '\n')
s=paste0(s,'Outliers: ', samp-nrow(dg), '\n')
cat(s)
########################
# Australia
df <- as.data.frame(read.table('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-AU.csv', sep=",", header=TRUE))
AU = df %>% select(starts_with('Think') | starts_with('From'))
colnames(AU) = c('sick_month', 'hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
samp = nrow(AU)
s= ''
for (j in 1:ncol(AU)) {
s=paste0(s,colnames(AU)[j],' : ',sum(AU[,j])/(nrow(AU)*15), '\n')
}
cat(s)
###############
# UK
df <- as.data.frame(read.table('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-UK.csv', sep=",", header=TRUE))
UK = df %>% select(starts_with('Think') |starts_with('From'))
colnames(UK) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
samp =nrow(UK)
s = ''
for (j in 1:ncol(UK)) {
s = paste0(s,colnames(UK)[j],' : ',sum(UK[,j])/(nrow(UK)*15), '\n')
}
cat(s)
country = 'UK'
df <- as.data.frame(read.table(paste0('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-', country,'.csv'), sep=",", header=TRUE))
dg = df %>% select(starts_with('Think') |starts_with('From'))
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
samp =nrow(dg)
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
# Filter
dg = dg %>% filter(sick_month >= deaths_month & sick_month >= hosp_month & sick_month >= sick_7d &
sick_month>= sick_today )
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
country = 'AU'
df <- as.data.frame(read.table(paste0('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-', country,'.csv'), sep=",", header=TRUE))
dg = df %>% select(starts_with('Think') |starts_with('From'))
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
samp =nrow(dg)
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
# Filter
dg = dg %>% filter(sick_month >= deaths_month & sick_month >= hosp_month & sick_month >= sick_7d &
sick_month>= sick_today )
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
s = paste0('Sample: ', samp, '\n')
s = paste0(s,'Sample + Inconsistency filter: ', nrow(dg), '\n')
s = paste0(s,'Outliers: ', samp-nrow(dg), '\n')
cat(s)
country = 'UK'
df <- as.data.frame(read.table(paste0('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-', country,'.csv'), sep=",", header=TRUE))
dg = df %>% select(starts_with('Think') |starts_with('From'))
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
samp =nrow(dg)
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
# Filter
dg = dg %>% filter(sick_month >= deaths_month & sick_month >= hosp_month & sick_month >= sick_7d &
sick_month>= sick_today )
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
s = paste0('Sample: ', samp, '\n')
s = paste0(s,'Sample + Inconsistency filter: ', nrow(dg), '\n')
s = paste0(s,'Outliers: ', samp-nrow(dg), '\n')
cat(s)
country = 'UK'
df <- as.data.frame(read.table(paste0('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-', country,'.csv'), sep=",", header=TRUE))
dg = df %>% select(starts_with('Think') |starts_with('From'))
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
samp =nrow(dg)
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
library(dplyr)
library("readxl")
country = 'UK'
df <- as.data.frame(read.table(paste0('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-', country,'.csv'), sep=",", header=TRUE))
dg = df %>% select(starts_with('Think') |starts_with('From'))
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
samp =nrow(dg)
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
# Filter
dg = dg %>% filter(sick_month >= deaths_month & sick_month >= hosp_month & sick_month >= sick_7d &
sick_month>= sick_today )
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
s = paste0('Sample: ', samp, '\n')
s = paste0(s,'Sample + Inconsistency filter: ', nrow(dg), '\n')
s = paste0(s,'Outliers: ', samp-nrow(dg), '\n')
cat(s)
s = paste0('Sample: ', samp, '\n')
s = paste0(s,'Sample + Inconsistency filter: ', nrow(dg), '\n')
s = paste0(s,'Outliers: ', samp-nrow(dg), '\n')
cat(s)
country = 'AU'
df <- as.data.frame(read.table(paste0('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/Data-', country,'.csv'), sep=",", header=TRUE))
dg = df %>% select(starts_with('Think') |starts_with('From'))
colnames(dg) = c('sick_month','hosp_month', 'deaths_month', 'sick_today', 'sick_7d', 'vacc' )
samp =nrow(dg)
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
# Filter
dg = dg %>% filter(sick_month >= deaths_month & sick_month >= hosp_month & sick_month >= sick_7d &
sick_month>= sick_today )
s = ''
for (j in 1:ncol(dg)) {
s = paste0(s,colnames(dg)[j],' : ',sum(dg[,j])/(nrow(dg)*15), '\n')
}
cat(s)
s = paste0('Sample: ', samp, '\n')
s = paste0(s,'Sample + Inconsistency filter: ', nrow(dg), '\n')
s = paste0(s,'Outliers: ', samp-nrow(dg), '\n')
cat(s)
df = read_xlsx('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/CH.xlsx')
CN = df
###########
# Region
Region = "Jiangsu"
df = read_xlsx('C:/Users/Sergio Diaz/OneDrive/Documentos/China report/CH.xlsx')
CN = df
source("~/NSUM Simulations/nsum_functions.R")
source("~/NSUM Simulations/initial_data.R")
source("~/NSUM Simulations/pop_functions.R")
pop_disjoint_sir_pa <- readRDS("~/NSUM Simulations/Robjects/pop_disjoint_sir_pa.rds")
pop_sir_pa <- readRDS("~/NSUM Simulations/Robjects/pop_sir_pa.rds")
pop_disjoint_uniform_pa <- readRDS("~/NSUM Simulations/Robjects/pop_disjoint_uniform_pa.rds")
pop_uniform_pa <- readRDS("~/NSUM Simulations/Robjects/pop_uniform_pa.rds")
pop_disjoint_sir_sw <- readRDS("~/NSUM Simulations/Robjects/pop_disjoint_sir_sw.rds")
pop_sir_sw <- readRDS("~/NSUM Simulations/Robjects/pop_sir_sw.rds")
pop_disjoint_uniform_sw <- readRDS("~/NSUM Simulations/Robjects/pop_disjoint_uniform_sw.rds")
pop_uniform_sw <- readRDS("~/NSUM Simulations/Robjects/pop_uniform_sw.rds")
Population = pop_disjoint_sir_sw
getNh_Maltiel(Population[gen_Survey(n_survey,Population),],v_pop_prob,N)
hpdistrib = 'uniform'
# hpdistrib = 'sir'
net = 'sw'
# net='pa'
#########################################################
setwd('NSUM Simulations')
source('initial_data.R')
source('pop_functions.R')
source('nsum_functions.R')
library(NSUM)
parameters = 0 #
Population = readRDS(paste0('Robjects/pop_',hpdistrib,'_',net,'.rds'))
net_sw = readRDS(paste0('Robjects/Net_',net,'.rds'))
Mhp_vis = readRDS(paste0('Robjects/mat_',hpdistrib,'_',net,'.rds'))
v_pop_total = getV_pop(n_pop,Population)
simulaciones          = data.frame(data = parameters)
set.seed(seed_sim)
lista_sim = list()
t = Sys.time()
#Iterations
for (l in 1:b) {
survey = Population[gen_Survey(n_survey, Population),]
survey_hp = Population[Population$hidden_population == 1,][gen_Survey(n_survey_hp, Population[Population$hidden_population == 1,]),]
Nh_real = sum(Population$hidden_population)
Nh_basic_sum    = getNh_basic_sum(survey,N)
Nh_basic_mean    = getNh_basic_mean(survey,N)
Nh_PIMLE = getNh_PIMLE(survey, v_pop_total, N)
Nh_MLE = getNh_MLE(survey, v_pop_total)
Nh_MLE_mod  = getNh_MLE_mod(survey, v_pop_total, N)
Nh_MoS = getNh_MoS(survey, v_pop_total, N)
Nh_GNSUM =  getNh_GNSUM(survey, survey_hp, v_pop_total, N)
Nh_TEO      = getNh_TEO(survey, v_pop_prob, N, iter = 1000)
Nh_Zheng    = getNh_Zheng(survey, v_pop_prob, N, iterations = 10000, burnins =1000)
# Nh_Maltiel = getNh_Maltiel(survey,v_pop_prob,N)
# Nh_Maltiel_barr = getNh_Maltiel_barrier(survey,v_pop_prob,N)
# Nh_Maltiel_trans = getNh_Maltiel_trans(survey,v_pop_prob,N)
# Nh_Maltiel_comb = getNh_Maltiel_general(survey,v_pop_prob,N)
Nh_Direct = getNh_Direct(survey, N)
#Dataframe for saving the estimates
sim = data.frame(Nh_real = Nh_real)
names(sim)[dim(sim)[2]] = str_c("Nh_real_",l)
sim = cbind(sim,Nh_basic_sum = Nh_basic_sum)
names(sim)[dim(sim)[2]] = str_c("Nh_basic_sum_",l)
sim = cbind(sim,Nh_basic_mean = Nh_basic_mean)
names(sim)[dim(sim)[2]] = str_c("Nh_basic_mean_",l)
sim = cbind(sim,Nh_PIMLE = Nh_PIMLE)
names(sim)[dim(sim)[2]] = str_c("Nh_PIMLE_",l)
sim = cbind(sim,Nh_MLE = Nh_MLE)
names(sim)[dim(sim)[2]] = str_c("Nh_MLE_",l)
sim = cbind(sim,Nh_MoS = Nh_MoS)
names(sim)[dim(sim)[2]] = str_c("Nh_MoS_",l)
sim = cbind(sim,Nh_GNSUM = Nh_GNSUM)
names(sim)[dim(sim)[2]] = str_c("Nh_GNSUM_",l)
sim = cbind(sim,Nh_MLE_mod = Nh_MLE_mod)
names(sim)[dim(sim)[2]] = str_c("Nh_MLE_mod_",l)
sim = cbind(sim, Nh_TEO = Nh_TEO)
names(sim)[dim(sim)[2]] = str_c("Nh_TEO_",l)
sim = cbind(sim, Nh_Zheng = Nh_Zheng)
names(sim)[dim(sim)[2]] = str_c("Nh_Zheng_",l)
# sim = cbind(sim, Nh_Maltiel = Nh_Maltiel)
# names(sim)[dim(sim)[2]] = str_c("Nh_Maltiel_",l)
#
#
# sim = cbind(sim, Nh_Maltiel_trans = Nh_Maltiel_trans)
# names(sim)[dim(sim)[2]] = str_c("Nh_trans_Maltiel_",l)
#
# sim = cbind(sim, Nh_Maltiel_barr = Nh_Maltiel_barr)
# names(sim)[dim(sim)[2]] = str_c("Nh_barr_Maltiel_",l)
#
# sim = cbind(sim, Nh_Maltiel_comb = Nh_Maltiel_comb)
# names(sim)[dim(sim)[2]] = str_c("Nh_comb_Maltiel_",l)
lista_sim[[l]] = sim
}
simulacion = bind_cols(lista_sim)
lista_simulacion = simulacion
simulaciones = lista_simulacion
# simulaciones = bind_rows(lista_simulacion)
simulaciones["data"] = parameters
simulation_data = simulaciones
tab = gen_df(simulation_data,"mean")
latex.table.mean(tab)
round(colMeans(tab),2)
source('data_analysis_functions.R')
tab = gen_df(simulation_data,"mean")
latex.table.mean(tab)
round(colMeans(tab),2)
tab = gen_df(simulation_data,"sd")
latex.table2(tab)
round(colMeans(tab),2)
round(colMeans(tab),2)[which.min(round(colMeans(tab),2))]
tab = gen_df(simulation_data,"abserror")
latex.table2(tab)
round(colMeans(tab),2)
round(colMeans(tab),2)[which.min(round(colMeans(tab),2))]
# hpdistrib = 'uniform'
hpdistrib = 'sir'
net = 'sw'
# net='pa'
#########################################################
setwd('NSUM Simulations')
# hpdistrib = 'uniform'
hpdistrib = 'sir'
net = 'sw'
# net='pa'
#########################################################
setwd('NSUM Simulations')
# hpdistrib = 'uniform'
hpdistrib = 'sir'
net = 'sw'
# net='pa'
#########################################################
setwd('NSUM Simulations')
# hpdistrib = 'uniform'
hpdistrib = 'sir'
net = 'sw'
# net='pa'
#########################################################
setwd('NSUM Simulations')
parameters = 0 #
Population = readRDS(paste0('Robjects/pop_',hpdistrib,'_',net,'.rds'))
net_sw = readRDS(paste0('Robjects/Net_',net,'.rds'))
Mhp_vis = readRDS(paste0('Robjects/mat_',hpdistrib,'_',net,'.rds'))
v_pop_total = getV_pop(n_pop,Population)
simulaciones          = data.frame(data = parameters)
set.seed(seed_sim)
lista_sim = list()
t = Sys.time()
#Iterations
for (l in 1:b) {
survey = Population[gen_Survey(n_survey, Population),]
survey_hp = Population[Population$hidden_population == 1,][gen_Survey(n_survey_hp, Population[Population$hidden_population == 1,]),]
Nh_real = sum(Population$hidden_population)
Nh_basic_sum    = getNh_basic_sum(survey,N)
Nh_basic_mean    = getNh_basic_mean(survey,N)
Nh_PIMLE = getNh_PIMLE(survey, v_pop_total, N)
Nh_MLE = getNh_MLE(survey, v_pop_total)
Nh_MLE_mod  = getNh_MLE_mod(survey, v_pop_total, N)
Nh_MoS = getNh_MoS(survey, v_pop_total, N)
Nh_GNSUM =  getNh_GNSUM(survey, survey_hp, v_pop_total, N)
Nh_TEO      = getNh_TEO(survey, v_pop_prob, N, iter = 1000)
Nh_Zheng    = getNh_Zheng(survey, v_pop_prob, N, iterations = 10000, burnins =1000)
# Nh_Maltiel = getNh_Maltiel(survey,v_pop_prob,N)
# Nh_Maltiel_barr = getNh_Maltiel_barrier(survey,v_pop_prob,N)
# Nh_Maltiel_trans = getNh_Maltiel_trans(survey,v_pop_prob,N)
# Nh_Maltiel_comb = getNh_Maltiel_general(survey,v_pop_prob,N)
Nh_Direct = getNh_Direct(survey, N)
#Dataframe for saving the estimates
sim = data.frame(Nh_real = Nh_real)
names(sim)[dim(sim)[2]] = str_c("Nh_real_",l)
sim = cbind(sim,Nh_basic_sum = Nh_basic_sum)
names(sim)[dim(sim)[2]] = str_c("Nh_basic_sum_",l)
sim = cbind(sim,Nh_basic_mean = Nh_basic_mean)
names(sim)[dim(sim)[2]] = str_c("Nh_basic_mean_",l)
sim = cbind(sim,Nh_PIMLE = Nh_PIMLE)
names(sim)[dim(sim)[2]] = str_c("Nh_PIMLE_",l)
sim = cbind(sim,Nh_MLE = Nh_MLE)
names(sim)[dim(sim)[2]] = str_c("Nh_MLE_",l)
sim = cbind(sim,Nh_MoS = Nh_MoS)
names(sim)[dim(sim)[2]] = str_c("Nh_MoS_",l)
sim = cbind(sim,Nh_GNSUM = Nh_GNSUM)
names(sim)[dim(sim)[2]] = str_c("Nh_GNSUM_",l)
sim = cbind(sim,Nh_MLE_mod = Nh_MLE_mod)
names(sim)[dim(sim)[2]] = str_c("Nh_MLE_mod_",l)
sim = cbind(sim, Nh_TEO = Nh_TEO)
names(sim)[dim(sim)[2]] = str_c("Nh_TEO_",l)
sim = cbind(sim, Nh_Zheng = Nh_Zheng)
names(sim)[dim(sim)[2]] = str_c("Nh_Zheng_",l)
# sim = cbind(sim, Nh_Maltiel = Nh_Maltiel)
# names(sim)[dim(sim)[2]] = str_c("Nh_Maltiel_",l)
#
#
# sim = cbind(sim, Nh_Maltiel_trans = Nh_Maltiel_trans)
# names(sim)[dim(sim)[2]] = str_c("Nh_trans_Maltiel_",l)
#
# sim = cbind(sim, Nh_Maltiel_barr = Nh_Maltiel_barr)
# names(sim)[dim(sim)[2]] = str_c("Nh_barr_Maltiel_",l)
#
# sim = cbind(sim, Nh_Maltiel_comb = Nh_Maltiel_comb)
# names(sim)[dim(sim)[2]] = str_c("Nh_comb_Maltiel_",l)
lista_sim[[l]] = sim
}
simulacion = bind_cols(lista_sim)
lista_simulacion = simulacion
simulaciones = lista_simulacion
# simulaciones = bind_rows(lista_simulacion)
simulaciones["data"] = parameters
simulation_data = simulaciones
tab = gen_df(simulation_data,"mean")
tab = (tab + gen_df(simulation_data2,"mean"))/2
round(colMeans(tab),2)
tab = gen_df(simulation_data,"mean")
latex.table.mean(tab)
round(colMeans(tab),2)
